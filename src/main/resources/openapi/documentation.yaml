openapi: "3.0.3"
info:
  title: "Groovy Music API"
  version: "1.0.0"
  description: "API для музыкального сервиса Groovy"
servers:
  - url: "http://127.0.0.1:8080"
    description: "Бэк для музыкального сервиса"

tags:
  - name: Authentication
    description: "Endpoints for auth"
    x-displayName: "Authentification"
  - name: Tracks
    description: "Endpoints for tracks"
    x-displayName: "Tracks"
  - name: Albums
    description: "Endpoints for albums"
    x-displayName: "Albums"
  - name: Playlists
    description: "Endpoints for playlists"
    x-displayName: "Playlists"

paths:
  /auth/register:
    post:
      tags: [Authentication]
      summary: "Регистрация нового пользователя"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: "Успешная регистрация"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: "Невалидные данные"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/login:
    post:
      tags: [Authentication]
      summary: "Авторизация пользователя"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: "Успешный вход"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: "Неверные учетные данные"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tracks:
    get:
      tags: [Tracks]
      summary: "Получить все треки"
      responses:
        "200":
          description: "Список треков"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Track"

  /tracks/{id}:
    get:
      tags: [Tracks]
      summary: "Получить трек по ID"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Трек"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
        "404":
          description: "Не найден"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tracks/album/{albumId}:
    get:
      tags: [Tracks]
      summary: "Получить все треки альбома"
      parameters:
        - name: albumId
          in: path
          required: true
          schema:
            type: string
          example: "1"
      responses:
        "200":
          description: "Список треков альбома"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Track"
        "400":
          description: "Неверный запрос"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tracks/artist/{artist}:
    get:
      tags: [Tracks]
      summary: "Получить все треки исполнителя"
      parameters:
        - name: artist
          in: path
          required: true
          schema:
            type: string
          example: "Queen"
      responses:
        "200":
          description: "Список треков исполнителя"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Track"
        "400":
          description: "Неверный запрос"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tracks/search:
    get:
      tags: [Tracks]
      summary: "Поиск треков по названию"
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          example: "Bohemian"
          description: "Поисковый запрос"
      responses:
        "200":
          description: "Список найденных треков"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Track"
        "400":
          description: "Неверный запрос"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tracks/top:
    get:
      tags: [Tracks]
      summary: "Получить популярные треки"
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
          example: 10
          description: "Количество треков (по умолчанию 10)"
      responses:
        "200":
          description: "Список популярных треков"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Track"

  /tracks/recent:
    get:
      tags: [Tracks]
      summary: "Получить недавние треки"
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
          example: 10
          description: "Количество треков (по умолчанию 10)"
      responses:
        "200":
          description: "Список недавних треков"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Track"

  /tracks/liked/{userId}:
    get:
      tags: [Tracks]
      summary: "Получить понравившиеся треки пользователя"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Список понравившихся треков"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Track"
        "400":
          description: "Неверный запрос"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /albums:
    get:
      tags: [Albums]
      summary: "Получить все альбомы"
      responses:
        "200":
          description: "Список альбомов"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Album"
        "500":
          description: "Внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /albums/{id}:
    get:
      tags: [Albums]
      summary: "Получить альбом по ID"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Альбом"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
        "404":
          description: "Не найден"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /albums/artist/{artist}:
    get:
      tags: [Albums]
      summary: "Получить альбомы по имени исполнителя"
      parameters:
        - name: artist
          in: path
          required: true
          schema:
            type: string
          example: "Queen"
      responses:
        "200":
          description: "Список альбомов исполнителя"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Album"
        "400":
          description: "Неверный запрос"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /albums/search:
    get:
      tags: [Albums]
      summary: "Поиск альбомов по названию"
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          example: "Night"
          description: "Поисковый запрос"
      responses:
        "200":
          description: "Список найденных альбомов"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Album"
        "400":
          description: "Неверный запрос"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /albums/genre/{genre}:
    get:
      tags: [Albums]
      summary: "Получить альбомы по жанру"
      parameters:
        - name: genre
          in: path
          required: true
          schema:
            type: string
          example: "Rock"
      responses:
        "200":
          description: "Список альбомов выбранного жанра"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Album"
        "400":
          description: "Неверный запрос"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "Внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tracks/{id}/like:
    post:
      tags: [Tracks]
      summary: "Лайкнуть трек"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "1"
        - name: X-User-Id
          in: header
          required: true
          schema:
            type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: "Трек успешно лайкнут"
        "400":
          description: "Неверный запрос"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: "Трек не найден"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags: [Tracks]
      summary: "Убрать лайк с трека"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "1"
        - name: X-User-Id
          in: header
          required: true
          schema:
            type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: "Лайк успешно убран"
        "400":
          description: "Неверный запрос"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: "Трек не найден"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tracks/{id}/play:
    post:
      tags: [Tracks]
      summary: "Записать прослушивание трека"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "1"
        - name: X-User-Id
          in: header
          required: true
          schema:
            type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: "Прослушивание записано"
        "400":
          description: "Неверный запрос"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: "Трек не найден"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      tags: [Tracks]
      summary: "Получить количество прослушиваний трека"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "1"
      responses:
        "200":
          description: "Количество прослушиваний"
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    format: int64
                    example: 1500
        "404":
          description: "Трек не найден"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /albums/{id}/like:
    post:
      tags: [Albums]
      summary: "Лайкнуть альбом"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "1"
        - name: X-User-Id
          in: header
          required: true
          schema:
            type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: "Альбом успешно лайкнут"
        "400":
          description: "Неверный запрос"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: "Альбом не найден"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags: [Albums]
      summary: "Убрать лайк с альбома"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "1"
        - name: X-User-Id
          in: header
          required: true
          schema:
            type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: "Лайк успешно убран"
        "400":
          description: "Неверный запрос"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: "Альбом не найден"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /playlists:
    post:
      tags: [Playlists]
      summary: "Создать новый плейлист"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Playlist"
      responses:
        "201":
          description: "Плейлист успешно создан"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Playlist"
        "400":
          description: "Неверный запрос"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /playlists/{id}:
    get:
      tags: [Playlists]
      summary: "Получить плейлист по ID"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "1"
      responses:
        "200":
          description: "Плейлист"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Playlist"
        "404":
          description: "Плейлист не найден"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags: [Playlists]
      summary: "Обновить плейлист"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Playlist"
      responses:
        "200":
          description: "Плейлист успешно обновлен"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Playlist"
        "400":
          description: "Неверный запрос"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: "Плейлист не найден"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags: [Playlists]
      summary: "Удалить плейлист"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "1"
      responses:
        "204":
          description: "Плейлист успешно удален"
        "404":
          description: "Плейлист не найден"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /playlists/{id}/tracks:
    post:
      tags: [Playlists]
      summary: "Добавить треки в плейлист"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: ["1", "2", "3"]
      responses:
        "200":
          description: "Треки успешно добавлены"
        "400":
          description: "Неверный запрос"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: "Плейлист не найден"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags: [Playlists]
      summary: "Удалить треки из плейлиста"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: ["1", "2", "3"]
      responses:
        "200":
          description: "Треки успешно удалены"
        "400":
          description: "Неверный запрос"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: "Плейлист не найден"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /playlists/user/{userId}:
    get:
      tags: [Playlists]
      summary: "Получить плейлисты пользователя"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: "Список плейлистов пользователя"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Playlist"
        "400":
          description: "Неверный запрос"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    RegisterRequest:
      type: object
      required: [email, password, username]
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "securePassword123"
        username:
          type: string
          minLength: 3
          example: "music_lover"

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "securePassword123"

    AuthResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserDto"
        token:
          type: string
          description: "JWT токен для аутентификации"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    UserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        email:
          type: string
          example: "user@example.com"
        username:
          type: string
          example: "music_lover"

    Track:
      type: object
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "Bohemian Rhapsody"
        artist:
          type: string
          example: "Queen"
        artistId:
          type: string
          example: "1"
        duration:
          type: integer
          example: 600
        albumId:
          type: string
          example: "1"
        storagePath:
          type: string
          example: "https://firebasestorage.googleapis.com/v0/b/groovy-5c16f.appspot.com/o/Queen_-_Bohemian_Rhapsody_47828495.mp3?alt=media&token=9ecfe45a-3a50-4d9f-9642-ded4167ce173"
        coverUrl:
          type: string
          example: "https://cdn-images.dzcdn.net/images/cover/201607ab9cd92a1f977659c7c524cadf/0x1900-000000-80-0-0.jpg"

    Album:
      type: object
      properties:
        id:
          type: string
          example: "1"
        title:
          type: string
          example: "A Night At Opera"
        artist:
          type: string
          example: "Queen"
        coverUrl:
          type: string
          example: "https://cdn-images.dzcdn.net/images/cover/201607ab9cd92a1f977659c7c524cadf/0x1900-000000-80-0-0.jpg"
        createdAt:
          type: string
          example: "1975"
        genre:
          type: string
          example: "Rock"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Invalid credentials"
        message:
          type: string
          example: "Password must be at least 8 characters long"

    Playlist:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: "Мой плейлист"
        description:
          type: string
          example: "Мои любимые треки"
        userId:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
        coverUrl:
          type: string
          example: "https://example.com/cover.jpg"
        tracks:
          type: array
          items:
            type: string
          example: ["1", "2", "3"]
        createdAt:
          type: integer
          format: int64
          example: 1648771200000
        updatedAt:
          type: integer
          format: int64
          example: 1648771200000
      required:
        - name
        - userId