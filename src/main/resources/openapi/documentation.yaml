openapi: "3.0.3"
info:
  title: "Groovy Music API"
  version: "1.0.0"
  description: "API для музыкального сервиса Groovy"
servers:
  - url: "http://127.0.0.1:8080/api/v1"
    description: "Бэк для музыкального сервиса"
tags:
  - name: Authentication
    description: "Endpoints for auth"
    x-displayName: "Authentification"
paths:
  /auth/register:
    post:
      tags: [Authentication]
      summary: "Регистрация нового пользователя"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: "Успешная регистрация"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: "Невалидные данные"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/login:
    post:
      tags: [Authentication]
      summary: "Авторизация пользователя"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        200:
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        401:
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  x-schemas-hide: true
  schemas:
    RegisterRequest:
      type: object
      required: [email, password, username]
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "securePassword123"
        username:
          type: string
          minLength: 3
          example: "music_lover"

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "securePassword123"

    AuthResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserDto"
        token:
          type: string
          description: "JWT токен для аутентификации"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    UserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        email:
          type: string
          example: "user@example.com"
        username:
          type: string
          example: "music_lover"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Invalid credentials"
        message:
          type: string
          example: "Password must be at least 8 characters long"